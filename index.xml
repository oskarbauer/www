<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugging Things to experience the Internet on plgd</title><link>https://next.plgd.dev/</link><description>Recent content in Plugging Things to experience the Internet on plgd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://next.plgd.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo Documentation</title><link>https://next.plgd.dev/documentation/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/documentation/</guid><description>Hugo is the world&amp;rsquo;s fastest static website engine. It&amp;rsquo;s written in Go (aka Golang) and developed by bep, spf13 and friends.
Below you will find some of the most common and helpful pages from our documentation.</description></item><item><title>Quick Start</title><link>https://next.plgd.dev/getting-started/quick-start/</link><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/quick-start/</guid><description>This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.
It is recommended to have Git installed to run this tutorial.
For other approaches learning Hugo like book or a video tutorial refer to the external learning resources page.
Step 1: Install Hugo Homebrew and MacPorts, package managers for macOS, can be installed from brew.</description></item><item><title>Install Hugo</title><link>https://next.plgd.dev/getting-started/installing/</link><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/installing/</guid><description>There is lots of talk about &amp;ldquo;Hugo being written in Go&amp;rdquo;, but you don&amp;rsquo;t need to install Go to enjoy Hugo. Just grab a precompiled binary!
Hugo is written in Go with support for multiple platforms. The latest release can be found at Hugo Releases.
Hugo currently provides pre-built binaries for the following:
macOS (Darwin) for x64, i386, and ARM architectures Windows Linux OpenBSD FreeBSD Hugo may also be compiled from source wherever the Go toolchain can run; e.</description></item><item><title>Basic Usage</title><link>https://next.plgd.dev/getting-started/usage/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/usage/</guid><description>The following is a description of the most common commands you will use while developing your Hugo project. See the Command Line Reference for a comprehensive view of Hugo&amp;rsquo;s CLI.
Test Installation Once you have installed Hugo, make sure it is in your PATH. You can test that Hugo has been installed correctly via the help command:
hugo help The output you see in your console should be similar to the following:</description></item><item><title>Directory Structure</title><link>https://next.plgd.dev/getting-started/directory-structure/</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/directory-structure/</guid><description>New Site Scaffolding Running the hugo new site generator from the command line will create a directory structure with the following elements:
. ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes</description></item><item><title>Code Toggle</title><link>https://next.plgd.dev/getting-started/code-toggle/</link><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/code-toggle/</guid><description>The Config Toggler! This is an example for the Config Toggle shortcode. Its purpose is to let users choose a Config language by clicking on its corresponding tab. Upon doing so, every Code toggler on the page will be switched to the target language. Also, target language will be saved in user&amp;rsquo;s localStorage so when they go to a different pages, Code Toggler display their last &amp;ldquo;toggled&amp;rdquo; config language.</description></item><item><title>Configure Markup</title><link>https://next.plgd.dev/getting-started/configuration-markup/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/configuration-markup/</guid><description>Configure Markup New in v0.60.0 See Goldmark for settings related to the default Markdown handler in Hugo.
Below are all markup related configuration in Hugo with their default settings:
yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; See each section below for details.
Goldmark Goldmark is from Hugo 0.60 the default library used for Markdown. It&amp;rsquo;s fast, it&amp;rsquo;s CommonMark compliant and it&amp;rsquo;s very flexible.</description></item><item><title>External Learning Resources</title><link>https://next.plgd.dev/getting-started/external-learning-resources/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/external-learning-resources/</guid><description>Books Hugo In Action
Hugo in Action is a step-by-step guide to using Hugo to create static websites. Working with a complete example website and source code samples, you’ll learn how to build and host a low-maintenance, high-performance site that will wow your users and stay stable without relying on a third-party server.
Hugo In Action Home Page
Build Websites with Hugo Build Websites with Hugo - Fast Web Development with Markdown (2020) by Brian P.</description></item><item><title>v2 in progress</title><link>https://next.plgd.dev/news/version2-inprogress/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/version2-inprogress/</guid><description>We are receiving many questions about the ongoing plgd activities. If you are looking at the master branch, you might be asking why we didn&amp;rsquo;t commit anything for the last weeks?
It&amp;rsquo;s because we are havily working on the plgd cloud 2.0! There will be more detailed post about new features and changes, but to give you some insights into what you can expect:
rapid memory optimization optimized device connection handling new event store model designed together with the MongoDB team optimized database writes and commands handling service configuration in YAML files deployment using a HELM chart plgd Dashboard and much more &amp;hellip;</description></item><item><title>plgd bundle available</title><link>https://next.plgd.dev/news/bundle-available/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/bundle-available/</guid><description>As you&amp;rsquo;ve might already experienced, the plgd cloud consist of a few scalable services which are in the production environment deployed and scaled independently. This deployment complexity is very often a pain point for device developers who are using the plgd cloud just to verify their device API implementation and its behavior.
To make the experience with the usage of the plgd cloud perfect to everyone, we have created a new package - plgd bundle docker container which bundles all plgd core services and more:</description></item><item><title>First certified Cloud-to-Cloud solution</title><link>https://next.plgd.dev/news/ocf-first-certified-cloud/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/ocf-first-certified-cloud/</guid><description>Just few days after releasing new OCF Universal Cloud Interface, first OCF Member Haier Group certifies their IoT cloud solution. Certification tool used by the OCF as well as the robustness of the OCF UCI specification is verified by the publicly announced reference implementation plgd!
Yes, we are now officialy part of this, making the IoT more secure and available to all of you! Read more on businesswire!</description></item><item><title>OCF Cloud2Cloud white paper</title><link>https://next.plgd.dev/news/ocf-c2c-whitepaper/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/ocf-c2c-whitepaper/</guid><description>An interoperable IoT platform needs to support multiple communication protocols and be secure by default, as well as resilient, scalable and support multitenancy. Reference implementation &amp;ldquo;plgd&amp;rdquo; (pronounced &amp;ldquo;plugged&amp;rdquo;), available at https://github.com/plgd-dev/cloud, is a cloud native IoT platform which fulfils the above needs and more.
This and much more was written by the Open Connectivity Foundation about us in just recently published OCF UCI white paper!</description></item></channel></rss>
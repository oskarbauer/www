<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugging Things to experience the Internet on plgd</title><link>https://next.plgd.dev/</link><description>Recent content in Plugging Things to experience the Internet on plgd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://next.plgd.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo Documentation</title><link>https://next.plgd.dev/documentation/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/documentation/</guid><description>Hugo is the world&amp;rsquo;s fastest static website engine. It&amp;rsquo;s written in Go (aka Golang) and developed by bep, spf13 and friends.
Below you will find some of the most common and helpful pages from our documentation.</description></item><item><title>Quick Start</title><link>https://next.plgd.dev/getting-started/quick-start/</link><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/quick-start/</guid><description>This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.
It is recommended to have Git installed to run this tutorial.
For other approaches learning Hugo like book or a video tutorial refer to the external learning resources page.
Step 1: Install Hugo Homebrew and MacPorts, package managers for macOS, can be installed from brew.</description></item><item><title>Install Hugo</title><link>https://next.plgd.dev/getting-started/installing/</link><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/installing/</guid><description>There is lots of talk about &amp;ldquo;Hugo being written in Go&amp;rdquo;, but you don&amp;rsquo;t need to install Go to enjoy Hugo. Just grab a precompiled binary!
Hugo is written in Go with support for multiple platforms. The latest release can be found at Hugo Releases.
Hugo currently provides pre-built binaries for the following:
macOS (Darwin) for x64, i386, and ARM architectures Windows Linux OpenBSD FreeBSD Hugo may also be compiled from source wherever the Go toolchain can run; e.</description></item><item><title>Basic Usage</title><link>https://next.plgd.dev/getting-started/usage/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/usage/</guid><description>The following is a description of the most common commands you will use while developing your Hugo project. See the Command Line Reference for a comprehensive view of Hugo&amp;rsquo;s CLI.
Test Installation Once you have installed Hugo, make sure it is in your PATH. You can test that Hugo has been installed correctly via the help command:
hugo help The output you see in your console should be similar to the following:</description></item><item><title>Directory Structure</title><link>https://next.plgd.dev/getting-started/directory-structure/</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/directory-structure/</guid><description>New Site Scaffolding Running the hugo new site generator from the command line will create a directory structure with the following elements:
. ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes</description></item><item><title>Code Toggle</title><link>https://next.plgd.dev/getting-started/code-toggle/</link><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/code-toggle/</guid><description>The Config Toggler! This is an example for the Config Toggle shortcode. Its purpose is to let users choose a Config language by clicking on its corresponding tab. Upon doing so, every Code toggler on the page will be switched to the target language. Also, target language will be saved in user&amp;rsquo;s localStorage so when they go to a different pages, Code Toggler display their last &amp;ldquo;toggled&amp;rdquo; config language.</description></item><item><title>Configure Markup</title><link>https://next.plgd.dev/getting-started/configuration-markup/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/configuration-markup/</guid><description>Configure Markup New in v0.60.0 See Goldmark for settings related to the default Markdown handler in Hugo.
Below are all markup related configuration in Hugo with their default settings:
yaml&amp;nbsp; toml&amp;nbsp; json&amp;nbsp; See each section below for details.
Goldmark Goldmark is from Hugo 0.60 the default library used for Markdown. It&amp;rsquo;s fast, it&amp;rsquo;s CommonMark compliant and it&amp;rsquo;s very flexible.</description></item><item><title>External Learning Resources</title><link>https://next.plgd.dev/getting-started/external-learning-resources/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/getting-started/external-learning-resources/</guid><description>Books Hugo In Action
Hugo in Action is a step-by-step guide to using Hugo to create static websites. Working with a complete example website and source code samples, you’ll learn how to build and host a low-maintenance, high-performance site that will wow your users and stay stable without relying on a third-party server.
Hugo In Action Home Page
Build Websites with Hugo Build Websites with Hugo - Fast Web Development with Markdown (2020) by Brian P.</description></item><item><title>Hugo 0.82: Mostly bugfixes</title><link>https://next.plgd.dev/news/0.82.0-relnotes/</link><pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/0.82.0-relnotes/</guid><description>This is a small release, mostly a maintainance/bugfix release. But also notable is that you can now add custom Markdown attributes (e.g. CSS classes) to code fences (aed7df62 @bep #8278) and that you can use the attribute lists in title render hooks (.Attributes; see cd0c5d7e @bep #8270).
This release represents 28 contributions by 8 contributors to the main Hugo code base.@bep leads the Hugo development with a significant amount of contributions, but also a big shoutout to @moorereason, and @gzagatti for their ongoing contributions.</description></item><item><title>Hugo 0.82: Mostly bugfixes</title><link>https://next.plgd.dev/news/0.83.0-relnotes/</link><pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/0.83.0-relnotes/</guid><description>This is a small release, mostly a maintainance/bugfix release. But also notable is that you can now add custom Markdown attributes (e.g. CSS classes) to code fences (aed7df62 @bep #8278) and that you can use the attribute lists in title render hooks (.Attributes; see cd0c5d7e @bep #8270).
This release represents 28 contributions by 8 contributors to the main Hugo code base.@bep leads the Hugo development with a significant amount of contributions, but also a big shoutout to @moorereason, and @gzagatti for their ongoing contributions.</description></item><item><title>Hugo on Apple M1</title><link>https://next.plgd.dev/news/hugo-macos-intel-vs-arm/</link><pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/hugo-macos-intel-vs-arm/</guid><description>By bep
The table below shows all of Hugo's benchmarks run on both a MacBook with Intel CPU and a Mac Mini M1 with an ARM CPU. Some notes: The Intel Mac is a 2019 16 inch MacBook with 2,3 GHz 8-Core Intel Core i9 with 32 GB ram. The ARM Mac is a new Mac Mini M1 base model with 8 GB of ram The benchmarks are run with go test -test.</description></item><item><title>Hugo on Apple M1</title><link>https://next.plgd.dev/news/hugo-macos-intel-vs/</link><pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate><guid>https://next.plgd.dev/news/hugo-macos-intel-vs/</guid><description>By bep
The table below shows all of Hugo's benchmarks run on both a MacBook with Intel CPU and a Mac Mini M1 with an ARM CPU. Some notes: The Intel Mac is a 2019 16 inch MacBook with 2,3 GHz 8-Core Intel Core i9 with 32 GB ram. The ARM Mac is a new Mac Mini M1 base model with 8 GB of ram The benchmarks are run with go test -test.</description></item></channel></rss>
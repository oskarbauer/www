<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugging Things to experience the Internet on plgd</title><link>https://plgd.dev/</link><description>Recent content in Plugging Things to experience the Internet on plgd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://plgd.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>JetStream</title><link>https://plgd.dev/features/jetstream/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/jetstream/</guid><description>By default, plgd cloud services use NATS as an EventBus and MongoDB as an EventStore. Some use-cases require subscription directly to the internal messaging system instead of communicating with the plgd using it&amp;rsquo;s gateways. To simplify the data reconciliation and scale consumers easier, plgd supports [JetStream (https://github.com/nats-io/jetstream) technology as an alternative EventBus. JetStream is built on top of NATS, persisting all published events. Using JetStream as an EventBus allows you to access older, not yet processed messages without accessing the EventStore.</description></item><item><title>Disaster Recovery</title><link>https://plgd.dev/features/disaster-recovery/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/disaster-recovery/</guid><description>Resiliency is understood as a way to readapt to a &amp;ldquo;crisis situation&amp;rdquo;, which applies to both infrastructure and the data. What it means varies from user to user. After service disruptions, some users are okay retrieving the latest resource value while others require all the changes which occurred during the time their application or internal messaging system was down. Another failure scenario is when the node hosting the plgd CoAP Gateway crashes.</description></item><item><title>Discover &amp; control device locally</title><link>https://plgd.dev/quickstart/device-to-device/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/device-to-device/</guid><description>This guide will walk you through the process of discovering, on-boarding, controlling your secure OCF Device using plgd/sdk library on your PC.
Prerequisite The Cloud Server runs on your Raspberry Pi Install OCF Client example Checkout plgd/sdk library:
# execute commands on your PC git clone -b v2 https://github.com/plgd-dev/sdk.git --recursive cd sdk Build OCF Client example:
cd cmd/ocfclient go build Run OCF Client example in the same folder:</description></item><item><title>Audit Log</title><link>https://plgd.dev/features/audit-log/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/audit-log/</guid><description>Audit Log TODO
Event Deduplication ResourceChanged There are two occasions when the ResourceChange event is skipped - when it is out of sequence and when it is a duplicate. Metadata and data of the latest event are stored in a snapshot and are used to check whether a problematic case occurred.
The order of events is not guaranteed, thus duplicate events can occur. To avoid this each event carries metadata.</description></item><item><title>Branding dashboard</title><link>https://plgd.dev/tutorials/dashboard-branding/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/dashboard-branding/</guid><description>Dashboard helps you to present to your stakeholders new device features as well as explain how this IoT framework works. To make it more convincing, basic templating functionality was introduced.
Colors change All colors are defined in one colors.scss file. Changing one of the colors will have an impact on all parts of the application.
Logo change You can change the logo of the application by replacing these files:
Big logo (when the menu is expanded) logo-big.</description></item><item><title>Compare plgd</title><link>https://plgd.dev/introduction/compare-plgd/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/compare-plgd/</guid><description/></item><item><title>Component Overview</title><link>https://plgd.dev/architecture/component-overview/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/architecture/component-overview/</guid><description>CoAP Gateway The CoAP gateway acts act as a CoAP Client, communicating with IoT devices - CoAP Servers following the OCF specification. As the component diagram describes, responsibilities of the gateway are:
handle and maintain TCP connections comming from devices forward authentication and authorization requests (see 5.5.5) to the Authorization Service process device CRUDN operations which are by its nature forwarded to the Resource Aggregate or Resource Directory Operational flow Before a device becomes operational and is able to interact with other devices, it needs to be appropriately onboarded.</description></item><item><title>Control device remotely</title><link>https://plgd.dev/quickstart/device-to-cloud/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/device-to-cloud/</guid><description>try.plgd.cloud The plgd team operates their own instance of the plgd cloud for free. This cloud instance is integrated with the plgd mobile application available for both iOS and Android based devices. Together with our IoTivity-Lite sample you&amp;rsquo;re able to onboard and work with your device remotely in couple of seconds. To start right away, follow try.plgd.cloud.</description></item><item><title>Create &amp; Delete device resources</title><link>https://plgd.dev/tutorials/create-delete-device-resources/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/create-delete-device-resources/</guid><description>Creating Resources Description Device with collection resource allows dynamic creation of resources. The created resource can only be of a well defined type (see call to oc_collections_add_rt_factory in Guide) and all created resources are contained within the collection.
Guide To develop your own device you can examine the example in cloud_server. Lets examine the example to identify the necessary steps that allow a device to dynamically create resources on a collection.</description></item><item><title>Create device</title><link>https://plgd.dev/quickstart/create-device/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/create-device/</guid><description>This guide will walk you through the process of starting your secure OCF Device using IoTivity library on the Raspberry Pi.
Requirements Raspberry Pi board with a microSD card with Raspberry Pi OS Optional: HDMI monitor and cable, USB keyboard and mouse for the Pi Ethernet or Wi-Fi connection between a DHCP-enabled network and the Pi Personal computer(Linux/MacOS recommended) on the same network as the Pi Setting up the Raspberry Pi To set up your Raspberry Pi, please follow this step-by-step tutorial.</description></item><item><title>Create first plgd application</title><link>https://plgd.dev/quickstart/create-plgd-app/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/create-plgd-app/</guid><description/></item><item><title>Dashboard</title><link>https://plgd.dev/developer-guide/developing-dashboard/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/developer-guide/developing-dashboard/</guid><description>Configuration for the client can be found in auth_config.json.
{ &amp;#34;domain&amp;#34;: &amp;#34;auth.plgd.cloud&amp;#34;, &amp;#34;clientID&amp;#34;: &amp;#34;pHdCKhnpgGEtU7KAPcLYCoCAkZ4cYVZg&amp;#34;, &amp;#34;audience&amp;#34;: &amp;#34;https://try.plgd.cloud&amp;#34;, &amp;#34;scope&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;httpGatewayAddress&amp;#34;: &amp;#34;https://api.try.plgd.cloud&amp;#34; } Installation and starting the development server $ npm install $ npm start Application will be hosted on http://localhost:3000 by default. To change the default port, put PORT=xxxx into package.json script for starting the development server
cross-env PORT=3000 craco start or set PORT into your environment variables.
Building the app $ npm run build Translations In order to add a new language, open the file config.</description></item><item><title>Deploy your own plgd cloud</title><link>https://plgd.dev/quickstart/deploy-plgd-cloud/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/deploy-plgd-cloud/</guid><description>There are multiple ways how to start using / testing the plgd Cloud on your own infrastructure. If you&amp;rsquo;re just trying to get in touch with this IoT framework, go back to Control device remotely tutorial and use our free try.plgd.cloud instance. In case you want to get in touch with the system localy and you have the Docker installed, use our plgd cloud #Bundle.
Deployment using helm chart is in progress.</description></item><item><title>Device Shadow</title><link>https://plgd.dev/features/device-shadow/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/device-shadow/</guid><description>The device shadow represents represents the current state of each device&amp;rsquo;s resource. Each connected device notifies the plgd Cloud about every change using the CoAP Gateway observations, which are started right after the device successfuly connects and authenticates. All changes are persisted in form of an audit log in the EventStore, from which is the latest version returned to clients through the Resource Directory.
Operation overview Update a resource from CoAP Gateway function encode64(data) { r = "</description></item><item><title>Domain Overview</title><link>https://plgd.dev/architecture/introduction/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/architecture/introduction/</guid><description>The Internet of Things (IoT) is the network of physical devices, which are embedded with electronics, software, sensors, actuators, and connectivity for the purpose of enabling these things to connect and exchange data. Thus creating opportunities for more direct integration of the physical world into computer-based systems, resulting in efficiency improvements, economic benefits and reduced human intervention. (Wikipedia, Internet of Things)
In other words, an IoT device is regularly subject to change, since it represents the world around it.</description></item><item><title>External OAuth Server with bundle</title><link>https://plgd.dev/tutorials/external-oauth-server/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/external-oauth-server/</guid><description>Even though the bundle start core plgd services as processes in a single container, a user has still a possibility to configure most of the services parameters. For testing purposes, the external OAuth Server (e.g. Auth0) can be set up. To skip internal mocked OAuth Server and switch to your external one, configure following environment variables:
OAUTH_AUDIENCE:https://api.example.comOAUTH_ENDPOINT_AUTH_URL:https://auth.example.com/authorizeOAUTH_ENDPOINT_TOKEN_URL:https://auth.example.com/oauth/tokenOAUTH_ENDPOINT:auth.example.comJWKS_URL:https://auth.example.com/.well-known/jwks.jsonOAUTH_CLIENT_ID:ij12OJj2J23K8KJsOAUTH_CLIENT_SECRET:654hkja12asd123dSERVICE_OAUTH_CLIENT_ID:412dsFf53Sj6$SERVICE_OAUTH_CLIENT_SECRET:235Jgdf65jsd4ShlsOWNER_CLAIM:subHow to configure Auth0 Assuming you have an account in the Auth0 OAuth as a service, you need to create 2 Applications and one API.</description></item><item><title>FAQ</title><link>https://plgd.dev/introduction/faq/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/faq/</guid><description/></item><item><title>Share devices within user groups</title><link>https://plgd.dev/tutorials/shared-ownership/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/shared-ownership/</guid><description>Devices are in the authorization service organized by the owner ID retrieved from the JWT token. The plgd API will based on this value identify the user and grant him the permission only to devices he owns. By default, JWT claim sub is used as the owner ID. In case you connect the plgd authorization service with the Auth0, each logged-in user can access only his devices. This behaviour can be changed by changing the OWNER_CLAIM configuration property and adding custom claim to your Auth0 users.</description></item><item><title>System Overview</title><link>https://plgd.dev/architecture/system-overview/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/architecture/system-overview/</guid><description>System Context Diagram plgd Context Diagram</description></item><item><title>What is plgd</title><link>https://plgd.dev/introduction/what-is-plgd/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/what-is-plgd/</guid><description>What are the biggest problems in IoT? Where do current market IoT solutions fall short? How should IoT be considered?
Put another way, &amp;ldquo;What are the most common issues preventing companies from fully realizing the benefits of IoT?&amp;quot; This question was answered at DZone by 23 executives involved with the Internet of Things.
Observations Companies are not able, or do not have the talent, to complete the end-to-end solution.</description></item><item><title>Who we are</title><link>https://plgd.dev/introduction/who-we-are/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/who-we-are/</guid><description/></item><item><title>Working with gRPC Client</title><link>https://plgd.dev/tutorials/working-with-grpc-client/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/working-with-grpc-client/</guid><description>For creating grpc-client you need to generate a code for your language from proto files, which are stored at plgd cloud. The plgd gRPC Gateway uses TLS. The client needs to have therefore properly configured TLS. Here is a simple example how to create a secured gRPC client communicating with the plgd gRPC Gateway.
import ( &amp;#34;google.golang.org/grpc&amp;#34; &amp;#34;google.golang.org/grpc/credentials&amp;#34; &amp;#34;github.com/plgd-dev/cloud/grpc-gateway/pb&amp;#34; &amp;#34;github.com/plgd-dev/cloud/grpc-gateway/client&amp;#34; ) ... // Create TLS connection to the grpc-gateway. gwConn, err := grpc.</description></item><item><title>plgd Documentation</title><link>https://plgd.dev/documentation/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/documentation/</guid><description/></item><item><title>v2 in progress</title><link>https://plgd.dev/news/version2-inprogress/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/version2-inprogress/</guid><description>We are receiving many questions about the ongoing plgd activities. If you are looking at the master branch, you might be asking why we didn&amp;rsquo;t commit anything for the last weeks?
It&amp;rsquo;s because we are havily working on the plgd cloud 2.0! There will be more detailed post about new features and changes, but to give you some insights into what you can expect:
rapid memory optimization optimized device connection handling new event store model designed together with the MongoDB team optimized database writes and commands handling service configuration in YAML files deployment using a HELM chart plgd Dashboard and much more &amp;hellip;</description></item><item><title>plgd bundle available</title><link>https://plgd.dev/news/bundle-available/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/bundle-available/</guid><description>As you&amp;rsquo;ve might already experienced, the plgd cloud consist of a few scalable services which are in the production environment deployed and scaled independently. This deployment complexity is very often a pain point for device developers who are using the plgd cloud just to verify their device API implementation and its behavior.
To make the experience with the usage of the plgd cloud perfect to everyone, we have created a new package - plgd bundle docker container which bundles all plgd core services and more:</description></item><item><title>First certified Cloud-to-Cloud solution</title><link>https://plgd.dev/news/ocf-first-certified-cloud/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/ocf-first-certified-cloud/</guid><description>Just few days after releasing new OCF Universal Cloud Interface, first OCF Member Haier Group certifies their IoT cloud solution. Certification tool used by the OCF as well as the robustness of the OCF UCI specification is verified by the publicly announced reference implementation plgd!
Yes, we are now officialy part of this, making the IoT more secure and available to all of you! Read more on businesswire!</description></item><item><title>OCF Cloud2Cloud white paper</title><link>https://plgd.dev/news/ocf-c2c-whitepaper/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/ocf-c2c-whitepaper/</guid><description>An interoperable IoT platform needs to support multiple communication protocols and be secure by default, as well as resilient, scalable and support multitenancy. Reference implementation &amp;ldquo;plgd&amp;rdquo; (pronounced &amp;ldquo;plugged&amp;rdquo;), available at https://github.com/plgd-dev/cloud, is a cloud native IoT platform which fulfils the above needs and more.
This and much more was written by the Open Connectivity Foundation about us in just recently published OCF UCI white paper!</description></item><item><title/><link>https://plgd.dev/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://plgd.dev/readme/</guid><description>Introduction What are the biggest problems in IoT? Where do current market IoT solutions fall short? How should IoT be considered?
Put another way, &amp;ldquo;What are the most common issues preventing companies from fully realizing the benefits of IoT?&amp;quot; This question was answered at DZone by 23 executives involved with the Internet of Things.
Observations:
Companies are not able, or do not have the talent, to complete the end-to-end solution.</description></item></channel></rss>
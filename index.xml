<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugging Things to experience the Internet on plgd</title><link>https://plgd.dev/</link><description>Recent content in Plugging Things to experience the Internet on plgd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://plgd.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Attestation Mechanisms</title><link>https://plgd.dev/device-provisioning-service/attestation-mechanisms/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://plgd.dev/device-provisioning-service/attestation-mechanisms/</guid><description>Most important part of the zero-touch provisioning is the attestation mechanism, a method used to confirm a device&amp;rsquo;s identity. Each enrollment group needs to have the attestation mechanism configured. Selected method and it&amp;rsquo;s configuration is used to identify to which enrollment group the device opening the connection to the DPS belongs to. The Device Provisioning Service supports 2 forms of attestations:
Manufacturer certificates based on the standard X.509 certificate authentication flow Trusted Platform Module (TPM) based on a nonce challenge X.</description></item><item><title>Device Provisioning</title><link>https://plgd.dev/features/provisioning/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/provisioning/</guid><description>When to use Device Provisioning Service There are many provisioning scenarios in which DPS is an excellent choice for getting devices connected and configured to IoT Hub, such as: Zero-touch provisioning to a single IoT solution without hardcoding IoT Hub connection information at the factory (initial setup) Load-balancing devices across multiple hubs Connecting devices to their owner&amp;rsquo;s IoT solution based on sales transaction data (multitenancy) Connecting devices to a particular IoT solution depending on use-case (solution isolation) Connecting a device to the IoT hub with the lowest latency (geo-sharding) Reprovisioning based on a change in the device Rolling the keys used by the device to connect to IoT Hub (when not using X.</description></item><item><title>Overview</title><link>https://plgd.dev/device-provisioning-service/overview/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://plgd.dev/device-provisioning-service/overview/</guid><description>Provisioning millions of devices in a secure and scalable manner without requiring any human interaction is what our plgd Device Provisioning Service (DPS) solves. Doesn&amp;rsquo;t matter if you&amp;rsquo;re running the plgd hub on-premise, off-premise or a fully managed instance, the DPS makes sure it trusts only your devices and provision them to the right plgd hub instance. Exactly no human interaction, zero-touch to provision and pre-configure millions of devices just-in-time and securely, using manufacturer certificates or TPMs.</description></item><item><title>OCF Conformance Testing</title><link>https://plgd.dev/tutorials/ocf-conformance-testing/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/ocf-conformance-testing/</guid><description>The Open Connectivity Foundation (OCF) is a global, member-driven technical standard development organization. Its 500+ members are working to enable trust, interoperability, and secure communication between IP-connected IoT devices and services. It does this by fostering collaboration between stakeholders across the IoT ecosystem to deliver the freely-available ISO/IEC specifications, including the Secure IP Device Framework, its open-source reference implementation, and an industry-recognized certification program.
The OCF Certification Program includes conformance testing to ensure robust and secure connectivity, and to help manufacturers create products that “just work” with other OCF Certified IoT devices regardless of their form factors, operating systems, service providers or transports.</description></item><item><title>plgd on K8S</title><link>https://plgd.dev/deployment/k8s/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/deployment/k8s/</guid><description>In this section, you can find several examples of how to deploy plgd hub with external OAuth2.0 Server or with mocked one for development purposes.
Getting started In our GitHub repository you can find charts/ folder with plgd hub Helm chart. This chart is automatically published to the Helm registry https://charts.plgd.dev during the release. Version of the chart is in sync with the appversion, matching the release tag (e.g. 2.</description></item><item><title>Testing</title><link>https://plgd.dev/tutorials/testing/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/testing/</guid><description>Testing plgd hub pull requests When a developer creates a pull request at plgd hub, it automatically triggers tests. The tests pulls the latest IoTivity-lite release, which is represented by docker image ghcr.io/iotivity/iotivity-lite/cloud-server-debug:latest. It contains all functionality to run with the hub and it is updated when new IoTivity-lite release is published.
function encode64(data) { r = ""; for (i=0; i 2; c2 = ((b1 &amp; 0x3) 4); c3 = ((b2 &amp; 0xF) 6); c4 = b3 &amp; 0x3F; r = "</description></item><item><title>Identity Store</title><link>https://plgd.dev/configuration/identity-store/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/identity-store/</guid><description>Identity Store manages devices and their owners.
Docker Image docker pull plgd/identity-store:latest YAML Configuration A configuration template is available on identity-store/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.stacktrace.enabled bool Log stacktrace. &amp;quot;false log.stacktrace.level string Stacktrace from level. &amp;quot;warn log.</description></item><item><title>[MOCK] OAuth Server</title><link>https://plgd.dev/configuration/oauth-server/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/oauth-server/</guid><description>OAuth2.0 Mock Server used for automated tests, bundle container and optionally deployment using the HELM chart for the development purposes.
Docker Image docker pull plgd/mock-oauth-server:latest YAML Configuration A configuration template is available on test/oauth-server/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.</description></item><item><title>Certificate Authority</title><link>https://plgd.dev/configuration/certificate-authority/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/certificate-authority/</guid><description>This service is used to sign identity certificates for devices and plgd-dev/device client.
Initialization of the SDK requires an Identity Certificate issued by this service after successful user authorization. The SDK is then able to discover and configure the ownership as described here. During this process, a CSR (Certificate Signing Request) is sent to the Certificate Authority which returns device&amp;rsquo;s Identity Certificate.
Docker Image docker pull plgd/certificate-authority:latest YAML Configuration A configuration template is available on certificate-authority/config.</description></item><item><title>Cloud2Cloud Connector</title><link>https://plgd.dev/configuration/cloud2cloud-connector/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/cloud2cloud-connector/</guid><description>C2C Connector connects to other hub implementing the Open Connectivity Foundation&amp;rsquo;s Cloud API for Cloud Services and mirror devices from this linked instance to yours.
Docker Image docker pull plgd/cloud2cloud-connector:latest YAML Configuration A configuration template is available in cloud2cloud-connector/config.yaml
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.</description></item><item><title>Cloud2Cloud Gateway</title><link>https://plgd.dev/configuration/cloud2cloud-gateway/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/cloud2cloud-gateway/</guid><description>C2C Gateway implements Open Connectivity Foundation&amp;rsquo;s Cloud API for Cloud Services providing API&amp;rsquo;s to mirror user&amp;rsquo;s devices to a different OCF standardized hub.
Docker Image docker pull plgd/cloud2cloud-gateway:latest YAML Configuration A configuration template is available in cloud2cloud-gateway/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.</description></item><item><title>CoAP Gateway</title><link>https://plgd.dev/configuration/coap-gateway/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/coap-gateway/</guid><description>CoAP Gateway provides API for devices and clients following the Open Connectivity Foundation specification.
Docker Image docker pull plgd/coap-gateway:latest YAML Configuration A configuration template is available on coap-gateway/config.yaml.
Logging Property Type Description Default log.dumpBody bool Set to true if you would like to dump raw messages. false log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format.</description></item><item><title>gRPC Gateway</title><link>https://plgd.dev/configuration/grpc-gateway/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/grpc-gateway/</guid><description>gRPC Gateway exposes the client&amp;rsquo;s gRPC API to manage user&amp;rsquo;s devices.
Docker Image docker pull plgd/grpc-gateway:latest YAML Configuration A configuration template is available on grpc-gateway/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.stacktrace.enabled bool Log stacktrace. &amp;quot;false log.stacktrace.level string Stacktrace from level.</description></item><item><title>HTTP Gateway</title><link>https://plgd.dev/configuration/http-gateway/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/http-gateway/</guid><description>HTTP Gateway exposes the client&amp;rsquo;s REST API to manage user&amp;rsquo;s devices, as well as the Web UI known as plgd Dashboard.
Docker Image docker pull plgd/http-gateway:latest YAML Configuration A configuration template is available on http-gateway/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.</description></item><item><title>Resource Aggregate</title><link>https://plgd.dev/configuration/resource-aggregate/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/resource-aggregate/</guid><description>Resource Aggregate translates commands to events, stores them to the database and publishes them to the messaging system.
Docker Image docker pull plgd/resource-aggregate:latest YAML Configuration A configuration template is available on resource-aggregate/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.stacktrace.enabled bool Log stacktrace.</description></item><item><title>Resource Directory</title><link>https://plgd.dev/configuration/resource-directory/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/configuration/resource-directory/</guid><description>Resource Directory maintains projection of devices which were requested by clients through the plgd gateways.
Docker Image docker pull plgd/resource-directory:latest YAML Configuration A configuration template is available on resource-directory/config.yaml.
Logging Property Type Description Default log.level string Logging enabled from level. &amp;quot;info&amp;quot; log.encoding string Logging format. The supported values are: &amp;quot;json&amp;quot;, &amp;quot;console&amp;quot; &amp;quot;json&amp;quot; log.stacktrace.enabled bool Log stacktrace. &amp;quot;false log.</description></item><item><title>Advanced security</title><link>https://plgd.dev/tutorials/advanced-security/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/advanced-security/</guid><description>Setup mutual TLS At coap-gateway you can set up mutual TLS, which verify the signature of the identity certificate of the device via configuration:
api:coap:tls:# defaultclientCertificateRequired:trueAfter that, only devices which have signed identity certificates by CA configured in coap-gateway can access the hub.
How coap-gateway resolves device ID When the device makes one of the calls sign up, sign in, sign out or sign off, coap-gateway needs to resolve the device ID.</description></item><item><title>Pending command</title><link>https://plgd.dev/features/pending-command/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/pending-command/</guid><description>Each command of hub is converted to events. eg:
create resource is converted to the ResourceCreatePending event. retrieve resource is converted to the ResourceRetrievePending event. update resource is converted to ResourceUpdatePending event. delete resource is converted to ResourceDeletePending event. update device metadata is converted to the DeviceMetadataUpdatePending event. All these events wait for processing by one of a gateway (mostly coap-gateway).
When one of the gateways process a pending event it executes one confirmation of command which converted to event:</description></item><item><title>Contribute</title><link>https://plgd.dev/quickstart/contribute/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/contribute/</guid><description>This guide will describe how to setup your environment to enable contribution to development.
Development on Linux (Ubuntu 20.02+ LTS) Install Go a. Follow official golang installation guide. b. Use update-golang script.
Both options install golang to /usr/local/go. For everything to work correctly you must add path to go to your environment PATH variable. Add the following line to your $HOME/.profile file.
export PATH=$PATH:/usr/local/go/bin (Restart may be needed for the changes in the .</description></item><item><title>JetStream</title><link>https://plgd.dev/features/jetstream/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/jetstream/</guid><description>By default, plgd hub services use NATS as an EventBus and MongoDB as an EventStore. Some use-cases require subscription directly to the internal messaging system instead of communicating with the plgd using its gateways. To simplify the data reconciliation and scale consumers easier, plgd supports JetStream technology as an alternative EventBus. JetStream is built on top of NATS, persisting all published events. Using JetStream as an EventBus allows you to access older, not yet processed messages without accessing the EventStore.</description></item><item><title>Disaster Recovery</title><link>https://plgd.dev/features/disaster-recovery/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/disaster-recovery/</guid><description>Resiliency is understood as a way to readapt to a &amp;ldquo;crisis situation&amp;rdquo;, which applies to both infrastructure and the data. What it means varies from user to user. After service disruptions, some users are okay retrieving the latest resource value while others require all the changes which occurred during the time their application or internal messaging system was down. Another failure scenario is when the node hosting the plgd CoAP Gateway crashes.</description></item><item><title>Discover &amp; control device locally</title><link>https://plgd.dev/quickstart/device-to-device/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/device-to-device/</guid><description>This guide will walk you through the process of discovering, on-boarding, controlling your secure OCF Device using plgd/device library on your PC.
Prerequisite The Cloud Server runs on your Raspberry Pi Install OCF Client example Checkout plgd/device library:
# execute commands on your PC git clone -b main https://github.com/plgd-dev/device.git --recursive cd device Build OCF Client example:
cd cmd/ocfclient go build Run OCF Client example in the same folder:</description></item><item><title>Audit Log</title><link>https://plgd.dev/features/audit-log/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/audit-log/</guid><description>TODO
Event Deduplication ResourceChanged There are two occasions when the ResourceChange event is skipped - when it is out of sequence and when it is a duplicate. Metadata and data of the latest event are stored in a snapshot and are used to check whether a problematic case occurred.
The order of events is not guaranteed, thus duplicate events can occur. To avoid this each event carries metadata. In the metadata there is a unique identifier for the connection that triggered the event, and a sequence number of the event for the given connection.</description></item><item><title>Branding dashboard</title><link>https://plgd.dev/tutorials/dashboard-branding/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/dashboard-branding/</guid><description>Dashboard helps you to present to your stakeholders new device features as well as explain how this IoT framework works. To make it more convincing, basic templating functionality was introduced.
Colors change All colors are defined in one colors.scss file. Changing one of the colors will have an impact on all parts of the application.
Logo change You can change the logo of the application by replacing these files:</description></item><item><title>Compare plgd</title><link>https://plgd.dev/introduction/compare-plgd/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/compare-plgd/</guid><description/></item><item><title>Component Overview</title><link>https://plgd.dev/architecture/component-overview/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/architecture/component-overview/</guid><description>CoAP Gateway The CoAP gateway acts as a CoAP Client, communicating with IoT devices, which serve as CoAP Servers following the OCF specification. As the component diagram describes, the responsibilities of the gateway are:
Handle and maintain TCP connections coming from devices Authenticate and authorize requests (see 5.5.5) from the device in conjunction with an OAuth2.0 Server Process device CRUDN operations which are by their nature forwarded to the Resource Aggregate or Resource Directory Operational flow Before a device becomes operational and is able to interact with other devices, it needs to be appropriately onboarded.</description></item><item><title>Control device remotely</title><link>https://plgd.dev/quickstart/device-to-hub/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/device-to-hub/</guid><description>try.plgd.cloud To try the plgd hub without downloading a single docker container, try.plgd.cloud instance is available for you for free. To onboard any IoTivitiy-Lite or any OCF standardized device to the plgd hub, the mobile application plgd is available for you in both, Apple and Google Play stores.
It&amp;rsquo;s simple as 1-2-3. Install, discover, onboard!</description></item><item><title>Create &amp; Delete device resources</title><link>https://plgd.dev/tutorials/create-delete-device-resources/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/create-delete-device-resources/</guid><description>Creating resources Device with a collection resource allows dynamic creation of resources. The created resource can only be of a well defined type (see call to oc_collections_add_rt_factory in Guide) and all created resources are contained within the collection.
How to create a resource To develop your own device you can check the example in cloud_server. Lets examine the code to identify the necessary steps that allow a device to dynamically create resources in a collection.</description></item><item><title>Create device</title><link>https://plgd.dev/quickstart/create-device/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/create-device/</guid><description>This guide will walk you through the process of starting your secure OCF Device using IoTivity library on the Raspberry Pi.
Requirements Raspberry Pi board with a microSD card with Raspberry Pi OS Optional: HDMI monitor and cable, USB keyboard and mouse for the Pi Ethernet or Wi-Fi connection between a DHCP-enabled network and the Pi Personal computer(Linux/MacOS recommended) on the same network as the Pi Setting up the Raspberry Pi To set up your Raspberry Pi, please follow this step-by-step tutorial.</description></item><item><title>Create first plgd application</title><link>https://plgd.dev/quickstart/create-plgd-app/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/create-plgd-app/</guid><description/></item><item><title>Dashboard</title><link>https://plgd.dev/tutorials/developing-dashboard/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/developing-dashboard/</guid><description>Configuration for the client can be found in auth_config.json.
{ &amp;#34;domain&amp;#34;: &amp;#34;auth.plgd.cloud&amp;#34;, &amp;#34;clientID&amp;#34;: &amp;#34;pHdCKhnpgGEtU7KAPcLYCoCAkZ4cYVZg&amp;#34;, &amp;#34;audience&amp;#34;: &amp;#34;https://try.plgd.cloud&amp;#34;, &amp;#34;scope&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;httpGatewayAddress&amp;#34;: &amp;#34;https://api.try.plgd.cloud&amp;#34; } Installation and starting the development server npm install npm start Application will be hosted on http://localhost:3000 by default. To change the default port, put PORT=xxxx into package.json script for starting the development server
cross-env PORT=3000 craco start or set PORT into your environment variables.
Building the app npm run build Translations In order to add a new language, open the file config.</description></item><item><title>Deploy your own plgd hub</title><link>https://plgd.dev/quickstart/deploy-plgd-hub/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/quickstart/deploy-plgd-hub/</guid><description>There are multiple ways how to start using / testing the plgd hub on your own infrastructure. If you&amp;rsquo;re just trying to get in touch with this IoT framework, go back to Control device remotely tutorial and use our free try.plgd.cloud instance. In case you want to get in touch with the system localy and you have the Docker installed, use our plgd hub #Bundle.
Deployment using helm chart is in progress.</description></item><item><title>Device Shadow</title><link>https://plgd.dev/features/device-shadow/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/device-shadow/</guid><description>The device shadow represents represents the current state of each device&amp;rsquo;s resource. Each connected device notifies the plgd hub about every change using the CoAP Gateway observations, which are started right after the device successfully connects and authenticates. All changes are persisted in form of an audit log in the EventStore, from which is the latest version returned to clients through the Resource Directory.
Operation overview Update a resource from CoAP Gateway function encode64(data) { r = "</description></item><item><title>Domain Overview</title><link>https://plgd.dev/architecture/introduction/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/architecture/introduction/</guid><description>The Internet of Things (IoT) is the network of physical devices, which are embedded with electronics, software, sensors, actuators, and connectivity for the purpose of enabling these things to connect and exchange data. Thus creating opportunities for more direct integration of the physical world into computer-based systems, resulting in efficiency improvements, economic benefits and reduced human intervention. (Wikipedia, Internet of Things)
An IoT device senses change, representing the world around it.</description></item><item><title>External OAuth Server with bundle</title><link>https://plgd.dev/tutorials/external-oauth-server/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/external-oauth-server/</guid><description>Even though the bundle start core plgd services as processes in a single container, a user has still a possibility to configure most of the services parameters. For testing purposes, the external OAuth Server (e.g. Auth0) can be set up. To skip the internal OAuth2.0 Mock Server and switch to your external one, configure the following environment variables:
OAUTH_AUDIENCE:https://api.example.comOAUTH_ENDPOINT:auth.example.comOAUTH_CLIENT_ID:ij12OJj2J23K8KJsOAUTH_CLIENT_SECRET:654hkja12asd123dOWNER_CLAIM:subHow to configure Auth0 Assuming you have an account in the Auth0 OAuth as a service, you need to create 2 Applications and one API.</description></item><item><title>FAQ</title><link>https://plgd.dev/introduction/faq/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/faq/</guid><description/></item><item><title>Share devices within user groups</title><link>https://plgd.dev/tutorials/shared-ownership/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/shared-ownership/</guid><description>Devices are organized in the Identity Store service by the owner ID retrieved from the JWT token. The plgd API will be based on this value to identify the user and grant him the permissions only to devices he owns. By default, JWT claim sub is used as the owner ID. In case you connect the plgd authorization service with the Auth0, each logged-in user can access only his devices. This behaviour can be changed by changing the OWNER_CLAIM configuration property and adding custom claim to your Auth0 users.</description></item><item><title>System Overview</title><link>https://plgd.dev/architecture/system-overview/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/architecture/system-overview/</guid><description>System Context Diagram plgd Context Diagram</description></item><item><title>What is plgd</title><link>https://plgd.dev/introduction/what-is-plgd/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/what-is-plgd/</guid><description>What are the biggest problems in IoT? Where do current market IoT solutions fall short? How should IoT be considered?
Put another way, &amp;ldquo;What are the most common issues preventing companies from fully realizing the benefits of IoT?&amp;quot; This question was answered at DZone by 23 executives involved with the Internet of Things.
Observations Companies are not able, or do not have the talent, to complete the end-to-end solution.</description></item><item><title>Who we are</title><link>https://plgd.dev/introduction/who-we-are/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/introduction/who-we-are/</guid><description/></item><item><title>Working with gRPC Client</title><link>https://plgd.dev/tutorials/working-with-grpc-client/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/working-with-grpc-client/</guid><description>For creating grpc-client you need to generate a code for your language from proto files, which are stored at plgd hub. The plgd gRPC Gateway uses TLS. The client needs to have therefore properly configured TLS. Here is a simple example how to create a secured gRPC client communicating with the plgd gRPC Gateway.
import ( &amp;#34;google.golang.org/grpc&amp;#34; &amp;#34;google.golang.org/grpc/credentials&amp;#34; &amp;#34;github.com/plgd-dev/hub/v2/grpc-gateway/pb&amp;#34; &amp;#34;github.com/plgd-dev/hub/v2/grpc-gateway/client&amp;#34; ) ... // Create TLS connection to the grpc-gateway. gwConn, err := grpc.</description></item><item><title>plgd Documentation</title><link>https://plgd.dev/documentation/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/documentation/</guid><description/></item><item><title>Client Library</title><link>https://plgd.dev/device-provisioning-service/client-library/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/device-provisioning-service/client-library/</guid><description>Get Package The Device Provisioning Service is distributed as a tar.gz package, which contains the dps shared library, public C headers and an example application.
Latest version: 0.0.1 Supported platforms: linux/amd64, linux/arm64, linux/arm/v7
Please examine the contents of the provided pkg-config (.pc) file and install required dependencies.
DPS Client API The API is defined in the public header files provided in the distributed package.
dps.h:</description></item><item><title>v2 in progress</title><link>https://plgd.dev/news/version2-inprogress/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/version2-inprogress/</guid><description>We are receiving many questions about the ongoing plgd activities. If you are looking at the master branch, you might be asking why we didn&amp;rsquo;t commit anything for the last weeks?
It&amp;rsquo;s because we are heavily working on the plgd hub 2.0! There will be more detailed post about new features and changes, but to give you some insights into what you can expect:
rapid memory optimization optimized device connection handling new event store model designed together with the MongoDB team optimized database writes and commands handling service configuration in YAML files deployment using a HELM chart plgd Dashboard and much more &amp;hellip;</description></item><item><title>plgd bundle available</title><link>https://plgd.dev/news/bundle-available/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/bundle-available/</guid><description>As you&amp;rsquo;ve might already experienced, the plgd hub consist of a few scalable services which are in the production environment deployed and scaled independently. This deployment complexity is very often a pain point for device developers who are using the plgd hub just to verify their device API implementation and its behavior.
To make the experience with the usage of the plgd hub perfect to everyone, we have created a new package - plgd bundle docker container which bundles all plgd core services and more:</description></item><item><title>First certified Cloud-to-Cloud solution</title><link>https://plgd.dev/news/ocf-first-certified-cloud/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/ocf-first-certified-cloud/</guid><description>Just few days after releasing new OCF Universal Cloud Interface, first OCF Member Haier Group certifies their IoT hub solution. Certification tool used by the OCF as well as the robustness of the OCF UCI specification is verified by the publicly announced reference implementation plgd!
Yes, we are now officially part of this, making the IoT more secure and available to all of you! Read more on businesswire!</description></item><item><title>OCF Cloud2Cloud white paper</title><link>https://plgd.dev/news/ocf-c2c-whitepaper/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://plgd.dev/news/ocf-c2c-whitepaper/</guid><description>An interoperable IoT platform needs to support multiple communication protocols and be secure by default, as well as resilient, scalable and support multitenancy. Reference implementation &amp;ldquo;plgd&amp;rdquo; (pronounced &amp;ldquo;plugged&amp;rdquo;), available at https://github.com/plgd-dev/hub, is a cloud-native IoT platform which fulfils the above needs and more.
This and much more was written by the Open Connectivity Foundation about us in just recently published OCF UCI white paper!</description></item><item><title/><link>https://plgd.dev/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://plgd.dev/readme/</guid><description>Introduction What are the biggest problems in IoT? Where do current market IoT solutions fall short? How should IoT be considered?
Put another way, &amp;ldquo;What are the most common issues preventing companies from fully realizing the benefits of IoT?&amp;quot; This question was answered at DZone by 23 executives involved with the Internet of Things.
Observations:
Companies are not able, or do not have the talent, to complete the end-to-end solution.</description></item></channel></rss>
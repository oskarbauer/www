<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tutorials on plgd</title><link>https://plgd.dev/categories/tutorials/</link><description>Recent content in tutorials on plgd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://plgd.dev/categories/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Branding dashboard</title><link>https://plgd.dev/tutorials/dashboard-branding/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/dashboard-branding/</guid><description>Dashboard helps you to present to your stakeholders new device features as well as explain how this IoT framework works. To make it more convincing, basic templating functionality was introduced.
Colors change All colors are defined in one colors.scss file. Changing one of the colors will have an impact on all parts of the application.
Logo change You can change the logo of the application by replacing these files:
Big logo (when the menu is expanded) logo-big.</description></item><item><title>Create &amp; Delete device resources</title><link>https://plgd.dev/tutorials/create-delete-device-resources/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/create-delete-device-resources/</guid><description>Creating Resources Description Device with collection resource allows dynamic creation of resources. The created resource can only be of a well defined type (see call to oc_collections_add_rt_factory in Guide) and all created resources are contained within the collection.
Guide To develop your own device you can examine the example in cloud_server. Lets examine the example to identify the necessary steps that allow a device to dynamically create resources on a collection.</description></item><item><title>External OAuth Server with bundle</title><link>https://plgd.dev/tutorials/external-oauth-server/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/external-oauth-server/</guid><description>Even though the bundle start core plgd services as processes in a single container, a user has still a possibility to configure most of the services parameters. For testing purposes, the external OAuth Server (e.g. Auth0) can be set up. To skip internal mocked OAuth Server and switch to your external one, configure following environment variables:
OAUTH_AUDIENCE:https://api.example.comOAUTH_ENDPOINT_AUTH_URL:https://auth.example.com/authorizeOAUTH_ENDPOINT_TOKEN_URL:https://auth.example.com/oauth/tokenOAUTH_ENDPOINT:auth.example.comJWKS_URL:https://auth.example.com/.well-known/jwks.jsonOAUTH_CLIENT_ID:ij12OJj2J23K8KJsOAUTH_CLIENT_SECRET:654hkja12asd123dSERVICE_OAUTH_CLIENT_ID:412dsFf53Sj6$SERVICE_OAUTH_CLIENT_SECRET:235Jgdf65jsd4ShlsOWNER_CLAIM:subHow to configure Auth0 Assuming you have an account in the Auth0 OAuth as a service, you need to create 2 Applications and one API.</description></item><item><title>Share devices within user groups</title><link>https://plgd.dev/tutorials/shared-ownership/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/shared-ownership/</guid><description>Devices are in the authorization service organized by the owner ID retrieved from the JWT token. The plgd API will based on this value identify the user and grant him the permission only to devices he owns. By default, JWT claim sub is used as the owner ID. In case you connect the plgd authorization service with the Auth0, each logged-in user can access only his devices. This behaviour can be changed by changing the OWNER_CLAIM configuration property and adding custom claim to your Auth0 users.</description></item><item><title>Working with gRPC Client</title><link>https://plgd.dev/tutorials/working-with-grpc-client/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/tutorials/working-with-grpc-client/</guid><description>For creating grpc-client you need to generate a code for your language from proto files, which are stored at plgd cloud. The plgd gRPC Gateway uses TLS. The client needs to have therefore properly configured TLS. Here is a simple example how to create a secured gRPC client communicating with the plgd gRPC Gateway.
import ( &amp;#34;google.golang.org/grpc&amp;#34; &amp;#34;google.golang.org/grpc/credentials&amp;#34; &amp;#34;github.com/plgd-dev/cloud/grpc-gateway/pb&amp;#34; &amp;#34;github.com/plgd-dev/cloud/grpc-gateway/client&amp;#34; ) ... // Create TLS connection to the grpc-gateway. gwConn, err := grpc.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>features on plgd</title><link>https://plgd.dev/categories/features/</link><description>Recent content in features on plgd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 04 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://plgd.dev/categories/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Pending command</title><link>https://plgd.dev/features/pending-command/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/pending-command/</guid><description>Each command of cloud is converted to events. eg:
create resource is converted to the ResourceCreatePending event. retrieve resource is converted to the ResourceRetrievePending event. update resource is converted to ResourceUpdatePending event. delete resource is converted to ResourceDeletePending event. update device metadata is converted to the DeviceMetadataUpdatePending event. All these events wait for processing by one of a gateway (mostly coap-gateway).
When one of the gateways process a pending event it executes one confirmation of command which converted to event:</description></item><item><title>JetStream</title><link>https://plgd.dev/features/jetstream/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/jetstream/</guid><description>By default, plgd cloud services use NATS as an EventBus and MongoDB as an EventStore. Some use-cases require subscription directly to the internal messaging system instead of communicating with the plgd using its gateways. To simplify the data reconciliation and scale consumers easier, plgd supports JetStream technology as an alternative EventBus. JetStream is built on top of NATS, persisting all published events. Using JetStream as an EventBus allows you to access older, not yet processed messages without accessing the EventStore.</description></item><item><title>Disaster Recovery</title><link>https://plgd.dev/features/disaster-recovery/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/disaster-recovery/</guid><description>Resiliency is understood as a way to readapt to a &amp;ldquo;crisis situation&amp;rdquo;, which applies to both infrastructure and the data. What it means varies from user to user. After service disruptions, some users are okay retrieving the latest resource value while others require all the changes which occurred during the time their application or internal messaging system was down. Another failure scenario is when the node hosting the plgd CoAP Gateway crashes.</description></item><item><title>Audit Log</title><link>https://plgd.dev/features/audit-log/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/audit-log/</guid><description>TODO
Event Deduplication ResourceChanged There are two occasions when the ResourceChange event is skipped - when it is out of sequence and when it is a duplicate. Metadata and data of the latest event are stored in a snapshot and are used to check whether a problematic case occurred.
The order of events is not guaranteed, thus duplicate events can occur. To avoid this each event carries metadata. In the metadata there is a unique identifier for the connection that triggered the event, and a sequence number of the event for the given connection.</description></item><item><title>Device Shadow</title><link>https://plgd.dev/features/device-shadow/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://plgd.dev/features/device-shadow/</guid><description>The device shadow represents represents the current state of each device&amp;rsquo;s resource. Each connected device notifies the plgd Cloud about every change using the CoAP Gateway observations, which are started right after the device successfully connects and authenticates. All changes are persisted in form of an audit log in the EventStore, from which is the latest version returned to clients through the Resource Directory.
Operation overview Update a resource from CoAP Gateway function encode64(data) { r = "</description></item></channel></rss>